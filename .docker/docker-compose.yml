services:
  php:
    build:
      context: php
      dockerfile: Dockerfile
      args:
        UID: ${MY_UID}
        GID: ${GID}
    container_name: ${PROJECT_NAME}_backend
    working_dir: /var/www/html
    volumes:
      - ../:/var/www/html
    user: "${MY_UID}:${GID}"
    depends_on:
      - postgres
    environment:
      - UID=${MY_UID}
      - GID=${GID}
    networks:
      - app_networks
    entrypoint: /bin/sh
    command:
      - -c
      - |
        if [ ! -f bin/console ]; then
          composer create-project --no-interaction api-platform/api-platform ${COMPOSER_PROJECT_NAME}
          composer config name ${COMPOSER_PROJECT_NAME} && \
          composer config type ${COMPOSER_TYPE}
        fi      
  nginx:
    image: nginx:latest
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - 8000:80
    volumes:
      - ../:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - app_networks  

  postgres:
    image: postgres:15
    container_name: ${PROJECT_NAME}_database
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_networks  
  # mysql:
  #   image: mysql:8.0
  #   container_name: ${PROJECT_NAME}_database
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${DB_DATABASE}
  #     MYSQL_USER: ${DB_USERNAME}
  #     MYSQL_PASSWORD: ${DB_PASSWORD}
  #   ports:
  #     - ${DB_PORT}:${DB_PORT}
  #   volumes:
  #     - db_data:/var/lib/mysql
  #   networks:
  #     - app_networks    

volumes:
  postgres_data:
#  db_data:
networks:
  app_networks:
    name: ${PROJECT_NAME}_network
    driver: bridge